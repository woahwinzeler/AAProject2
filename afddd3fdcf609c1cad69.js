import*as THREE from"three";import{OrbitControls}from"three/examples/jsm/controls/OrbitControls.js";import fragment from"./shaders/fragment.glsl";import vertex from"./shaders/vertex.glsl";import imageGraphic from"../static/img/ALEXSGRAPHIC.png";import paintingGraphic from"../static/img/Painting.png";import purplePaintingGraphic from"../static/img/PurplePainting.png";export default class Sketch{constructor(){this.sizes={width:window.innerWidth,height:window.innerHeight},this.canvas=document.querySelector("canvas.webgl"),this.scene=new THREE.Scene,this.renderer=new THREE.WebGLRenderer({canvas:this.canvas}),this.renderer.setSize(this.sizes.width,this.sizes.height),this.renderer.setPixelRatio(Math.min(window.devicePixelRatio,2)),this.textures=[(new THREE.TextureLoader).load(imageGraphic),(new THREE.TextureLoader).load(paintingGraphic),(new THREE.TextureLoader).load(purplePaintingGraphic)],this.camera=new THREE.PerspectiveCamera(70,this.sizes.width/this.sizes.height,.1,3e3),this.camera.position.x=0,this.camera.position.y=0,this.camera.position.z=400,this.scene.add(this.camera),this.controls=new OrbitControls(this.camera,this.renderer.domElement),window.addEventListener("resize",(()=>{this.sizes.width=window.innerWidth,this.sizes.height=window.innerHeight,this.camera.aspect=this.sizes.width/this.sizes.height,this.camera.updateProjectionMatrix(),this.renderer.setSize(this.sizes.width,this.sizes.height),this.renderer.setPixelRatio(Math.min(window.devicePixelRatio,2))})),this.time=0,(new THREE.FontLoader).load("/fonts/gentilis_bold.typeface.json",(function(e){this.textgeometry=new THREE.TextGeometry("Hello three.js!",{font:e,size:80,height:5,curveSegments:12,bevelEnabled:!0,bevelThickness:10,bevelSize:8,bevelOffset:0,bevelSegments:5})}));var e=new THREE.MeshPhongMaterial({color:16711680}),t=new THREE.Mesh(this.textgeometry,e);t.position.set(100,100,100),this.scene.add(t),this.step=1e3,this.addMesh(),this.render(),this.paintingRendered=!1,window.addEventListener("keydown",(e=>{"ArrowUp"===e.code||"ArrowDown"===e.code?this.paintingRendered?(this.removePaintingMesh(),this.addMesh(),this.paintingRendered=!1):(this.removeMesh(),this.addPaintingMesh(),this.paintingRendered=!0):"ArrowLeft"===e.code?this.step+=50:"ArrowRight"===e.code?this.step-=50:console.log(e.code)}))}addMesh(e=0){this.material=new THREE.ShaderMaterial({uniforms:{progress:{type:"f",value:0},imageGraphic:{type:"t",value:this.textures[0]}},vertexShader:vertex,fragmentShader:fragment,side:THREE.DoubleSide,transparent:!0,depthTest:!1,depthWrite:!1}),this.geometry=new THREE.BufferGeometry,this.positions=new THREE.BufferAttribute(new Float32Array(786432),3),this.coordinates=new THREE.BufferAttribute(new Float32Array(786432),3);let t=0;for(let i=0;i<512;i++){let s=i-256+e;for(let n=0;n<512;n++){let r=n-256+e;this.positions.setXYZ(t,s,r,0),this.coordinates.setXYZ(t,i,n,0),t++}}this.geometry.setAttribute("position",this.positions),this.geometry.setAttribute("aCoordinates",this.coordinates),this.mesh=new THREE.Points(this.geometry,this.material),this.mesh.callback=function(){console.log(this.name)},this.scene.add(this.mesh),this.mesh.position.z+=e}removeMesh(){this.geometry.dispose(),this.material.dispose(),this.scene.remove(this.mesh)}removePaintingMesh(){this.PaintingGeometry.dispose(),this.PaintingMaterial[0].dispose(),this.PaintingMaterial[1].dispose(),this.scene.remove(this.PaintingMesh),this.scene.remove(this.PaintingMeshBack)}addPaintingMesh(){this.PaintingMaterial=[new THREE.MeshBasicMaterial({map:this.textures[1],side:THREE.FrontSide,transparent:!0}),new THREE.MeshBasicMaterial({map:this.textures[2],side:THREE.BackSide,transparent:!0})],this.PaintingGeometry=new THREE.PlaneBufferGeometry(1250,1e3),this.PaintingMesh=new THREE.Mesh(this.PaintingGeometry,this.PaintingMaterial[0]),this.PaintingMeshBack=new THREE.Mesh(this.PaintingGeometry,this.PaintingMaterial[1]),this.scene.add(this.PaintingMesh),this.scene.add(this.PaintingMeshBack)}render(){this.time+=1,this.mesh.rotation.z=this.time/this.step,this.renderer.render(this.scene,this.camera),this.requestId=window.requestAnimationFrame(this.render.bind(this))}}new Sketch;